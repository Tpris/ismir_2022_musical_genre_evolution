pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
rf_metrics_plot <-
rf_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
rf_metrics_plot
saveRDS(rf_metrics, file = "rf_metrics_2009.rds")
#rf_metrics <- readRDS(file = "rf_metrics_2009.rds")
##### XGBoost #####
###### Mean Prediction 4 Tags Accuracy By Years ######
xgb_mean_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_mean_pred_acc = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Mean Prediction Hip-Hop Binary Accuracy By Years ######
# Treatment by year
xgb_mean_bin_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_mean_pred_bin_acc = mean(xgb_pred_bin_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Recall By Years ######
# Treatment by year
xgb_recall_tbyyear <-
data_predict %>%
filter(tag == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_recall = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Precision By Years ######
xgb_precision_tbyyear <-
data_predict %>%
filter(xgb_pred == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_precision = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Aggregating Graphics: Mean Acc, Mean Hip-Hop Acc, Trap, Non-Trap ######
# Treatment by year
xgb_metrics <- xgb_mean_acc_tbyyear %>%
right_join(xgb_mean_bin_acc_tbyyear, by = c("release_year", "treatment_year")) %>%
right_join(xgb_recall_tbyyear, by = c("release_year", "treatment_year")) %>%
pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
xgb_metrics_plot <-
xgb_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
xgb_metrics_plot
saveRDS(xgb_metrics, file = "xgb_metrics_2009.rds")
#xgb_metrics <- readRDS(file = "xgb_metrics_2009.rds")
##### Aggregating Graphics: GNB, KNN, RF, XGB #####
aggregate_plots <- ggarrange(gnb_metrics_plot, knn_metrics_plot, rf_metrics_plot, xgb_metrics_plot,
ncol = 4,
common.legend = T)
annotate_figure(aggregate_plots, top = text_grob("Training Set: 2009", face = "bold", size = 14))
##### Average Four Classifiers #####
average <- cbind(gnb_metrics, knn_metrics[,4], rf_metrics[,4], xgb_metrics[,4])
colnames(average)[4:7] <- c("values_gnb","values_knn","values_rf","values_xgb")
average$values <- (average$values_gnb + average$values_knn + average$values_rf + average$values_xgb)/4
average <- average[,c(1:3,8)]
average$metrics <- gsub('gnb_','classifiers_',average$metrics)
saveRDS(average, file = "classifiers_metrics_2009.rds")
#### Preparing working environment ####
# Set current folder as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, naivebayes, e1071, class, randomForest, pROC,
caret, lubridate, ggpubr, xgboost)
# Load data
data <- readRDS('song_data.rds')
data <- data %>% filter(tag %in% c("pop","rock","hiphop")) # Only these three genres overlap with GTZAN genres
pacman::p_load(tidyverse, naivebayes, e1071, class, randomForest, pROC,
caret, lubridate, ggpubr, xgboost, textreadr)
##### Prepare GTZAN data for training classifiers #####
norm_minmax <- function(x){
(x- min(x)) /(max(x)-min(x))
}
ml_data <- read_csv("GTZAN_features_30_sec.csv")
test_filtered <-
read_rtf("test_filtered.rtf") %>%
str_split('.wav') %>%
unlist()
train_filtered <-
read_rtf("train_filtered.rtf") %>%
str_split('.wav') %>%
unlist()
valid_filtered <-
read_rtf("valid_filtered.rtf") %>%
str_split('.wav') %>%
unlist()
filtered <- c(train_filtered[-length(train_filtered)],
valid_filtered[-length(valid_filtered)],
test_filtered[-length(test_filtered)])
filtered <- gsub('.*/','',filtered)
filtered <- paste(filtered, '.wav',sep = '')
ml_data <- ml_data[ml_data$filename %in% filtered,]
ml_data <-
ml_data %>%
filter(label %in% c("pop","rock","hiphop")) %>%
select(1,3,5,7,9,11,13,20,22,24,26,28,60) %>%
mutate(across(c(2:12), norm_minmax)) %>%
rename(tag = label) %>%
rename_with(~gsub("_mean","_norm",.x, fixed=TRUE)) %>%
rename(rmse_norm = rms_norm)
View(ml_data)
set.seed(210016)
ml_train <-
ml_data %>%
group_by(tag) %>%
slice_sample(prop = 0.8)
ml_test <-
ml_data %>%
anti_join(ml_train, by = "filename")
ml_train <- ml_train[,c(13,2:12)]
ml_test <- ml_test[,c(13,2:12)]
#saveRDS(data_predict, file = "data_predict_GTZAN.rds")
data_predict <- readRDS(file = "../rnr/data_predict_GTZAN.rds")
##### Gaussian Naive Bayes #####
###### Mean Prediction 4 Tags Accuracy By Years ######
gnb_mean_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(gnb_mean_pred_acc = mean(gnb_pred_acc)) %>%
ungroup() %>%
print()
###### Mean Prediction Hip-Hop Binary Accuracy By Years ######
gnb_mean_bin_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(gnb_mean_pred_bin_acc = mean(gnb_pred_bin_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Recall By Years ######
# Treatment by year
gnb_recall_tbyyear <-
data_predict %>%
filter(tag == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(gnb_recall = mean(gnb_pred_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Precision By Years ######
gnb_precision_tbyyear <-
data_predict %>%
filter(gnb_pred == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(gnb_precision = mean(gnb_pred_acc)) %>%
ungroup() %>%
print()
###### Aggregating Graphics: Mean Acc, Mean Hip-Hop Acc, Trap, Non-Trap ######
gnb_metrics <-
gnb_mean_acc_tbyyear %>%
right_join(gnb_mean_bin_acc_tbyyear, by = c("release_year", "treatment_year")) %>%
right_join(gnb_recall_tbyyear, by = c("release_year", "treatment_year")) %>%
pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
gnb_metrics_plot <-
gnb_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
gnb_metrics_plot
saveRDS(gnb_metrics, file = "gnb_metrics_GTZAN.rds")
knn_mean_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(knn_mean_pred_acc = mean(knn_pred_acc)) %>%
ungroup() %>%
print()
###### Mean Prediction Hip-Hop Binary Accuracy By Years ######
knn_mean_bin_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(knn_mean_pred_bin_acc = mean(knn_pred_bin_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Recall By Years ######
knn_recall_tbyyear <-
data_predict %>%
filter(tag == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(knn_recall = mean(knn_pred_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Precision By Years ######
knn_precision_tbyyear <-
data_predict %>%
filter(knn_pred == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(knn_precision = mean(knn_pred_acc)) %>%
ungroup() %>%
print()
###### Aggregating Graphics: Mean Acc, Mean Hip-Hop Acc, Trap, Non-Trap ######
# Treatment by year
knn_metrics <-
knn_mean_acc_tbyyear %>%
right_join(knn_mean_bin_acc_tbyyear, by = c("release_year", "treatment_year")) %>%
right_join(knn_recall_tbyyear, by = c("release_year", "treatment_year")) %>%
pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
knn_metrics_plot <-
knn_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
knn_metrics_plot
saveRDS(knn_metrics, file = "knn_metrics_GTZAN.rds")
##### Random Forest #####
###### Mean Prediction 4 Tags Accuracy By Years ######
rf_mean_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(rf_mean_pred_acc = mean(rf_pred_acc)) %>%
ungroup() %>%
print()
###### Mean Prediction Hip-Hop Binary Accuracy By Years ######
rf_mean_bin_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(rf_mean_pred_bin_acc = mean(rf_pred_bin_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Recall By Years ######
rf_recall_tbyyear <-
data_predict %>%
filter(tag == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(rf_recall = mean(rf_pred_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Precision By Years ######
rf_precision_tbyyear <-
data_predict %>%
filter(rf_pred == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(rf_precision = mean(rf_pred_acc)) %>%
ungroup() %>%
print()
###### Aggregating Graphics: Mean Acc, Mean Hip-Hop Acc, Trap, Non-Trap ######
# Treatment by year
rf_metrics <- rf_mean_acc_tbyyear %>%
right_join(rf_mean_bin_acc_tbyyear, by = c("release_year", "treatment_year")) %>%
right_join(rf_recall_tbyyear, by = c("release_year", "treatment_year")) %>%
pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
rf_metrics_plot <-
rf_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
rf_metrics_plot
saveRDS(rf_metrics, file = "rf_metrics_GTZAN.rds")
##### XGBoost #####
###### Mean Prediction 4 Tags Accuracy By Years ######
xgb_mean_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_mean_pred_acc = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Mean Prediction Hip-Hop Binary Accuracy By Years ######
# Treatment by year
xgb_mean_bin_acc_tbyyear <-
data_predict %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_mean_pred_bin_acc = mean(xgb_pred_bin_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Recall By Years ######
# Treatment by year
xgb_recall_tbyyear <-
data_predict %>%
filter(tag == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_recall = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Prediction Hip-Hop Precision By Years ######
xgb_precision_tbyyear <-
data_predict %>%
filter(xgb_pred == "hiphop") %>%
group_by(release_year, treatment_year) %>%
summarize(xgb_precision = mean(xgb_pred_acc)) %>%
ungroup() %>%
print()
###### Aggregating Graphics: Mean Acc, Mean Hip-Hop Acc, Trap, Non-Trap ######
# Treatment by year
xgb_metrics <- xgb_mean_acc_tbyyear %>%
right_join(xgb_mean_bin_acc_tbyyear, by = c("release_year", "treatment_year")) %>%
right_join(xgb_recall_tbyyear, by = c("release_year", "treatment_year")) %>%
pivot_longer(!c(release_year, treatment_year), names_to = "metrics", values_to = "values")
xgb_metrics_plot <-
xgb_metrics %>%
ggplot(aes(x = release_year, y = values)) +
geom_point(aes(shape = metrics), size = 2.5) +
geom_line(aes(linetype = metrics))
xgb_metrics_plot
saveRDS(xgb_metrics, file = "xgb_metrics_GTZAN.rds")
##### Aggregating Graphics: GNB, KNN, RF, XGB #####
aggregate_plots <- ggarrange(gnb_metrics_plot, knn_metrics_plot, rf_metrics_plot, xgb_metrics_plot,
ncol = 4,
common.legend = T)
annotate_figure(aggregate_plots, top = text_grob("Training Set: GTZAN", face = "bold", size = 14))
##### Average Four Classifiers #####
average <- cbind(gnb_metrics, knn_metrics[,4], rf_metrics[,4], xgb_metrics[,4])
colnames(average)[4:7] <- c("values_gnb","values_knn","values_rf","values_xgb")
average$values <- (average$values_gnb + average$values_knn + average$values_rf + average$values_xgb)/4
average <- average[,c(1:3,8)]
average$metrics <- gsub('gnb_','classifiers_',average$metrics)
saveRDS(average, file = "classifiers_metrics_GTZAN.rds")
# Load packages
if (!require("pacman")) install.packages("pacman")
#### Preparing working environment ####
# Set current folder as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(tidyverse, ggpubr, lubridate)
# Load main data and check composition
data <- readRDS('song_data.rds')
# Load metrics data: Need to run the first three R scripts
filenames <- list.files(pattern = "_metrics_")
read_list <- lapply(filenames, readRDS)
names(read_list) <- gsub(".rds","",filenames)
merge <- map_dfr(read_list, bind_rows,.id = "src")  # Merge into one
# Indexing classifier & data source
merge <- merge %>%
mutate(classifier = gsub("(^[a-z]{2,})_.*$", "\\1", src),
data = gsub("^.*_metrics_(.*)$", "\\1", src))
# Combining with proportion data
merge <- merge %>%
right_join(data_genres_composition, by = "release_year") %>%
right_join(data_genres_composition_GTZAN, by = "release_year")
#### Preliminary Checks ####
# Check genre composition over time
data_genres_composition <-
data %>%
filter(release_year %in% c("2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019")) %>%
mutate(release_year = year(release_date)) %>%
group_by(release_year, tag) %>%
summarize(n=n()) %>%
spread(tag, n) %>%
mutate(sum = folk + hiphop + pop + rock,
folk_prop = folk/sum,
hiphop_prop = hiphop/sum,
pop_prop = pop/sum,
rock_prop = rock/sum) %>%
print()
data_genres_composition_GTZAN <-
data %>%
filter(release_year %in% c("2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019")) %>%
filter(tag != "folk") %>%
mutate(release_year = year(release_date)) %>%
group_by(release_year, tag) %>%
summarize(n=n()) %>%
spread(tag, n) %>%
mutate(sum_GTZAN = hiphop + pop + rock,
hiphop_prop_GTZAN = hiphop/sum_GTZAN,
pop_prop_GTZAN = pop/sum_GTZAN,
rock_prop_GTZAN = rock/sum_GTZAN) %>%
select(1,5:8) %>%
print()
#### Preparing working environment ####
# Set current folder as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, ggpubr, lubridate)
#### Preliminary Checks ####
# Check genre composition over time
data_genres_composition <-
data %>%
filter(release_year %in% c("2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019")) %>%
mutate(release_year = year(release_date)) %>%
group_by(release_year, tag) %>%
summarize(n=n()) %>%
spread(tag, n) %>%
mutate(sum = folk + hiphop + pop + rock,
folk_prop = folk/sum,
hiphop_prop = hiphop/sum,
pop_prop = pop/sum,
rock_prop = rock/sum) %>%
print()
# Load data
data <- readRDS('song_data.rds')
#### Preliminary Checks ####
# Check genre composition over time
data_genres_composition <-
data %>%
filter(release_year %in% c("2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019")) %>%
mutate(release_year = year(release_date)) %>%
group_by(release_year, tag) %>%
summarize(n=n()) %>%
spread(tag, n) %>%
mutate(sum = folk + hiphop + pop + rock,
folk_prop = folk/sum,
hiphop_prop = hiphop/sum,
pop_prop = pop/sum,
rock_prop = rock/sum) %>%
print()
data_genres_composition_GTZAN <-
data %>%
filter(release_year %in% c("2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019")) %>%
filter(tag != "folk") %>%
mutate(release_year = year(release_date)) %>%
group_by(release_year, tag) %>%
summarize(n=n()) %>%
spread(tag, n) %>%
mutate(sum_GTZAN = hiphop + pop + rock,
hiphop_prop_GTZAN = hiphop/sum_GTZAN,
pop_prop_GTZAN = pop/sum_GTZAN,
rock_prop_GTZAN = rock/sum_GTZAN) %>%
select(1,5:8) %>%
print()
# Load metrics data: Need to run the first three R scripts
filenames <- list.files(pattern = "_metrics_")
read_list <- lapply(filenames, readRDS)
names(read_list) <- gsub(".rds","",filenames)
merge <- map_dfr(read_list, bind_rows,.id = "src")  # Merge into one
# Indexing classifier & data source
merge <- merge %>%
mutate(classifier = gsub("(^[a-z]{2,})_.*$", "\\1", src),
data = gsub("^.*_metrics_(.*)$", "\\1", src))
# Combining with proportion data
merge <- merge %>%
right_join(data_genres_composition, by = "release_year") %>%
right_join(data_genres_composition_GTZAN, by = "release_year")
View(merge)
# Check polynomial regression
#lm_polynomial <-
merge %>%
#filter(release_year != 2009) %>%
filter(grepl('mean_pred_bin_acc', metrics) | grepl('recall', metrics)) %>%
filter(!grepl('trap', metrics)) %>%
group_by(src, metrics) %>%
#summarize(mean = mean(years))
summarize(est_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,1],
sd_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,2],
pval_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,4],
est_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,1],
sd_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,2],
pval_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,4],
r2 = summary(lm(values ~ release_year + I(release_year^2)))$r.squared) %>%
arrange(metrics) %>%
select(src, metrics, pval_year,pval_year2) %>%
filter(grepl('acc',metrics)) %>% View()
# Check polynomial regression
lm_polynomial <-
merge %>%
#filter(release_year != 2009) %>%
filter(grepl('mean_pred_bin_acc', metrics) | grepl('recall', metrics)) %>%
filter(!grepl('trap', metrics)) %>%
group_by(src, metrics) %>%
#summarize(mean = mean(years))
summarize(est_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,1],
sd_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,2],
pval_year = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[2,4],
est_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,1],
sd_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,2],
pval_year2 = summary(lm(values ~ release_year + I(release_year^2)))$coefficients[3,4],
r2 = summary(lm(values ~ release_year + I(release_year^2)))$r.squared) %>%
arrange(metrics) %>%
select(src, metrics, pval_year,pval_year2) %>%
filter(grepl('acc',metrics))
lm_polynomial$pval_year2 <0.05
# Visualize: Mean Prediction Hip-Hop Binary & Recall
plot_accuracy <-
merge %>%
filter(grepl("mean_pred_bin", metrics) == TRUE) %>%
filter(data %in% c("2009","2018","GTZAN")) %>%
ggplot(aes(x = release_year, y = values, shape = metrics)) +
#geom_point(size = 1.5) +
geom_line(aes(linetype = data, color = data)) +
geom_vline(xintercept = 2017, linetype = "dashed") +
#scale_linetype_manual(values=c("solid", "dotted", "solid", "dotted", "solid", "dotted")) +
facet_grid(~ factor(classifier,
levels = c("gnb","knn","rf",'xgb',"classifiers"),
labels = c("GNB","KNN","RF",'XGB',"Average"))) +
geom_rect(aes(xmin = 2017, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey45", alpha = 0.01) +
scale_x_continuous(breaks = seq(2010,2018,4)) +
scale_color_manual(name = "Cohort", values = c("grey2","grey10","grey15")) +
scale_linetype_manual(name = "Cohort", values = c("solid","longdash","dotted")) +
theme(legend.position = "bottom") +
labs(
#title = "Accuracy Hip-Hop",
x = "",
y = "Accuracy")
plot_recall <-
merge %>%
filter(grepl("recall", metrics) == TRUE) %>%
filter(grepl("trap", metrics) == FALSE) %>%
filter(data %in% c("2009","2018","GTZAN")) %>%
ggplot(aes(x = release_year, y = values, shape = metrics)) +
#geom_point(size = 1.5) +
geom_line(aes(linetype = data, color = data)) +
geom_vline(xintercept = 2017, linetype = "dashed") +
#scale_linetype_manual(values=c("solid", "dotted", "solid", "dotted", "solid", "dotted")) +
facet_grid(~ factor(classifier,
levels = c("gnb","knn","rf",'xgb',"classifiers"),
labels = c("GNB","KNN","RF",'XGB',"Average"))) +
geom_rect(aes(xmin = 2017, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey45", alpha = 0.01) +
scale_x_continuous(breaks = seq(2010,2018,4)) +
scale_color_manual(name = "Cohort", values = c("grey2","grey10","grey15")) +
scale_linetype_manual(name = "Cohort", values = c("solid","longdash","dotted")) +
theme(legend.position = "bottom") +
labs(
#title = "Accuracy Hip-Hop",
x = "Release Year",
y = "Recall")
ggarrange(plot_accuracy,plot_recall,nrow = 2, common.legend = T, legend = "bottom")
